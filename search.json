[{"title":"前端随笔24-8-2","url":"/2025/05/21/24-8-2%E5%89%8D%E7%AB%AF%E9%9A%8F%E7%AC%94/","content":"font 字体属性的简写时font:italic 700 24px/56px arial, sans-serif;第一个font-style 第二个font-weight 第三个font-size/line-height最后是font-family的列表优先级是先后顺序。注意：font-size &amp; font-family不可省略，否则不会生效。\n禁用按钮cursor:not-allowed;红色禁用标记backgroung-clip:text;当背景为渐变色时，文字会有较好的渐变效果。\n动态传值以及页面动态效果开发的最终方案关于动态传值问题传值问题可以从表单元素的value属性说起，在这个属性中可以储存从后台拿到的值，但是普通的div等页面的元素可以使用自定义数据类型进行动态传值 data-value data-id等 ，要注意这些属性保存的都是字符串，取出时应该用.getAttribute(&#39;data-value&#39;)拿到\n页面动态效果开发如果只是用 js 控制style改变的均为内联样式，这种方式在微调方面效果显著，但是这种方式调节的是元素的内联样式，在需要大型的调整或者动大的变化时这种方式并不适用，应该通过调整元素的类名改变。、\n控制元素类名的方式\n通过 className，每个元素的 className 都是，它的类名，改变时可以直接赋值上新的类名，原来的类名将会被覆盖掉，所以常有这样的操作,来追加类名，但是不能将加号换成减号直接使用。element.className+=&quot;NewClassName&quot; 2.通过 classList,使用 className 调整类名时还是比较麻烦，所以直接用 classList。(1)通过 ClassList 可以获取元素的全部类名;(2)通过 ClassList.remove()可以删除元素的一个或多个类名；(3)通过 ClassList.add()可以向元素添加一个或多个类名;(4)通过 ClassList.lentgh 可以获取到元素类名的数目；(5)通过 ClassList.item(x)可以获取到元素类名索引为 x 的类名;(6)通过 ClassList.toggle()可以为元素切换类，只能有一个类名;(7)通过 ClassList.contains(x)查看元素是否存在类名为”x”的类;！！！添加删除多个类名时记得是用逗号隔开的参数，不能用空格隔开的类名列表。\n\ntextarea 文本域不加处理时用户可以自由拉伸可以加上`resize : none;`取消这个事件。与他自己的闭合标签中不能有任何东西，包括空格。\n\n事件监听设置事件细分有三种方式\n1. 在script标签中\n`&lt;div class=&quot;small&quot; onclick=&quot;(function()&#123;console.log(&#39;第一次点击&#39;)&#125;)()&quot;&gt;domNode&lt;/div&gt;`\n2.快捷绑定\n`&lt;script&gt;domNode.onclick=function()&#123;console.log(&#39;script&#39;)&#125;&lt;/script&gt;`\n3.监听\n``` js\n\ndomNode.addEventListener(‘click’,function(){        console.log(‘第一次点击’)    })    domNode.addEventListener(‘click’,function(){        console.log(‘第二次点击’)    })&#96;&#96;&#96;！！！先后顺序与排序相同，第三种可以绑定多个，前面的会造成覆盖。\n","categories":["随笔"],"tags":["前端开发日常"]},{"title":"js的数组方法","url":"/2025/05/21/JS%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/","content":"介绍JS 数组是极为灵活的数据结构，应用极为广泛，在这些封装好的方法帮助下，可以大大提高开发效率，和代码可读性。\n方法1. arr.push( )   该方法接收一个或多个参数并将所有的参数按顺序插入数组的末尾。   若将数组作为参数传入，不会将传入的数组拆开而是直接加入到原数组中。\n2. arr.forEach(callback )   该方法接收一个回调函数作为参数 ，\n//该方法没有返回值，直接在回调函数内对数组处理即可//其中回调函数的参数分别是遍历到的当前元素 当前元素的索引 被遍历的数组arr.forEach(function (item, index, thisarr) &#123;  //处理元素&#125;);\n\n3. arr.map(callback)   该方法同样接收一个回调函数作为参数，\n//该方法最后返回一个与原数组相同长度的新数组//在回调函数内部可以对原数组处理，其中参数与forEach的回调参数相同const newArr = arr.map(function (item, index, thisarr) &#123;  return result;&#125;);\n\n4. arr.fliter(callback)   该方法也接收一个回调函数为参\n//该方法最后返回一个与原数组相同长度的新数组//在回调函数内返回一个布尔类型的数据决定当前元素是否返回到新数组中//，其中参数与forEach的回调参数相同const newArr = arr.fliter(function (item, index, thisarr) &#123;  return flag;&#125;);\n\n5. arr.findIndex(callback)   该方法接收一个回调函数\n//该方法最后返回一个查找到元素的索引，找不到返回 -1//在回调函数内返回一个布尔类型的数据决定当前元素是否找到了元素//，其中参数与forEach的回调参数相同const newArr = arr.findIndex(function (item, index, thisarr) &#123;  return flag;&#125;);\n\n6. arr.splice(a,b,c )   该方法接收三个参数，第一个是修改的索引，第二个是将要删除的个数，第三个或更多的元素是在要修改位置插入的，这个方法会原地修改数组。\n7. arr.sort(callback)   该方法为所有数组元素进行了排序，按照升序或者降序排列。\n//回调函数的两个参数是数组相邻的两项//a-b&lt;0时升序排列arr.sort(function (a, b) &#123;  return a - b;&#125;);\n\n8. arr.reverse( )   该方法可以直接将数组的元素反转顺序。\n9. arr.shift( )   删除第一个元素并返回该元素。\n10. arr.pop( )删除末尾元素并返回删除的元素。\n\n11. arr.unshift( )在数组起始处添加元素并返回数组长度。\n\n12. arr.join( )可以将数组转化为字符串，并将该字符串返回，传入的字符参数会作为里连接符。\n参数为字符。\n\n13. arr.concat( )传入两个数组合成一个数组并反回新数组。\n\n14. arr.slice( )arr.slice(起始索引，结束索引)\n包含开始不包含结束。\n可以只写一个参数，截取从该元素开始以后的所有元素。\n还可以写负参数，代表截取到倒数第几个元素。\n\n15. arr.includes( )判断传入的元素是否在数组中。\n\n","categories":["js程序设计"],"tags":["js"]},{"title":"markdown语法","url":"/2025/07/07/markdown%20%E8%AF%AD%E6%B3%95/","content":"markdown语法标题语法根据# 号个数,每个# 号都代表一级标题.根据自己的层次结构决定使用几个#号。一般是有递进规律，一个井号的只用一次。\n换行语法在一行的末尾添加两个或者多个空格，\n然后回车可创建一个空行。\n强调语法粗体：请在单词或短语的前后各添加两个星号或下划线。如需加粗一个单词或短语的中间部分用以表示强调的话，请在要加粗部分的两侧各添加两个星号。\n斜体：与粗体类似，可使用一个星号将想要斜体效果的部分引上。\n注意！！！： 可以使用三星号将想要特殊效果的部分引起来，代表斜体和粗体都加上了。\n引用语法\n用大于号代表引用,块引用就是将所有的行前都加上大于号\n\n嵌套引用也是支持的\n\n\n列表语法有序列表要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n\n\n\n\n\n无序列表要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。\n\n\n\n\n\n代码语法反引号： printf(&quot;hello world&quot;); 行代码\n围栏式代码块： 用三个反引号跟上代码语言，最后由三个反引号收尾。\npublic class Main &#123;    public static void main(String[] args) &#123;    System.out.println(&quot;hello world &quot;);    &#125;&#125;\n\n分割线语法\n要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (---) 或下划线 (___) ，并且不能包含其他内容。\n\n链接语法中括号加小括号语法 中括号内写名称（随便写） 小括号内写地址\n百度\n图片语法与链接语法类似但是要注意前面有个叹号。\n![图片](图片地址)\n表格语法用竖杠代表表格分割  |\n\n&gt;| 表头     | 表头 |&gt;|: -----------  :|: ----------- :| //在此可进行格式控制，加上：代表向左对齐或者向右对齐，都加时居中对齐, - 的数量与表格布局无关&gt;| Paragraph   | Text        |\n\n\n\n\n姓名\n班级\n年龄\n\n\n\n张三\n计科233\n18\n\n\n !!!注意 \n\n\n列表标题语法和需要在符号后加空格才会生效。\n所有格式控制符号一定是英文符号。\n有些找不到的键符可以在功能键下边那一行找，例如反引号在左上角。\n可以使用markdown编译器。 本地的 typora 或者是多端共享数据放在厂商服务器上的 语雀 ；自由选择编译器。可以在编译器上写好之后往博客上粘贴。\n我这里只是列举了简单的语法的基本使用，其他语法可以自行了解。\nmarkdown官网\n在word或者编译器中直接跳转链接需要使用ctrl键和鼠标点击。\n\n","categories":["学习笔记"],"tags":["学习笔记"]},{"title":"原型和原型链问题探究","url":"/2025/05/21/%E5%8E%9F%E5%9E%8B%E9%97%AE%E9%A2%98/","content":"简介原型知识是前端必不可少的进阶知识之一，掌握好原型知识可以让前端开发中更加游刃有余。\nJS对象对象是一种引用或者说是复合的数据结构。展现形式是键值形式，关于对象有很多内容，本节不做深度探究这个问题。主要探究关于原型有关的问题。\n对象的创建模式1.字面量型  var obj1 = &#123;    name: &quot;Jack&quot;,     age: 26     &#125;2.Object构造函数模式var obj2 = new Object() obj2.name = &quot;Jack&quot; obj2.age = 263.构造函数模式function Test(name, age)&#123;    this.name = name    this.age = age    this.say = function()&#123;        console.log(&#x27;我能说话&#x27;)    &#125;&#125;var obj3 = new Test(&#x27;Jack&#x27;, 26)var obj4 = new Test(&#x27;Rose&#x27;, 25)\n\n原型问题主要是探究构造函数在上面那段代码中，Test 就是构造函数，obj3,obj4 是这个构造函数的实例对象，每个对象都有一个特殊的属性就是原型(prototype),(函数也有原型,函数也是对象）\n注意:1. 显式原型和隐式原型:\n    a. 显式原型用prototype属性表示和查找,这是函数的特有属性,普通对象没有.\n    b. 隐式原型用__proto__属性表示和查找,这是对象的属性,由于函数也是对象,\n    所以每个对象都有这个属性.\n    c. 隐式原型的值指向它构造函数的显式原型的值\n2. Object的原型对象的隐式原型指向null\n3. Function是在浏览器运行时已经创建好了的,是所有的起点.而且它的显式原型与隐式原型相等.\n4. 原型链指的就是隐式原型指向连起来的一条链状结构,在查找时会按照这条链,\n一直向上查找,直到null\n\n原型链\n拓展箭头函数出现的意义是什么?(这个问题不在于探究箭头函数的使用问题.)\n箭头函数是ES6中出现的一种简化写法,\n` say=()=&gt;&#123;&#125;`,箭头函数的出现关键是解决了JS中函数的二义性\n在其他面向对象的语言中在开始时就有类的概念,\n在js中函数不仅可以是指令序列,也可能是一个构造函数用来创建对象\n而箭头函数的出现限制了其只能是指令序列而不是构造函数.优化了代码执行\n\n","categories":["js程序设计"],"tags":["js难点"]},{"title":"日记7-28","url":"/2025/05/21/%E6%97%A5%E8%AE%B024-7-28/","content":"展示透明背景1.设置 opacity透明度属性会导致整体变透明\n2.设置rgba 背景颜色最后一个参数a 代表透明度。\n","categories":["日记"],"tags":["前端开发日常"]},{"title":"编程规范","url":"/2025/05/21/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/","content":"编写代码规范\n每次写完一部分在代码后留出一个空行.便于修改和续写.\n模块化编程,尽量让每个模块的功能单一,不要功能交叉.\n\n代码命名规范\n辨识度,详细度,区分度  准确且详细\n类名使用大驼峰命名,变量等使用小驼峰命名或者下划线命名\n\n文件夹命名","categories":["public"],"tags":["代码规范"]}]