<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端随笔24-8-2</title>
    <url>/2024/08/31/24-8-2%E5%89%8D%E7%AB%AF%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<h3 id="font-字体属性的简写时"><a href="#font-字体属性的简写时" class="headerlink" title="font 字体属性的简写时"></a>font 字体属性的简写时</h3><p><code>font:italic 700 24px/56px arial, sans-serif;</code><br>第一个<code>font-style</code> 第二个<code>font-weight</code> 第三个<code>font-size/line-height</code>最后是<code>font-family</code>的列表优先级是先后顺序。<br>注意：<code>font-size &amp; font-family</code>不可省略，否则不会生效。</p>
<h3 id="禁用按钮"><a href="#禁用按钮" class="headerlink" title="禁用按钮"></a>禁用按钮</h3><p><code>cursor:not-allowed;</code>红色禁用标记<br><code>backgroung-clip:text;</code>当背景为渐变色时，文字会有较好的渐变效果。</p>
<h3 id="动态传值以及页面动态效果开发的最终方案"><a href="#动态传值以及页面动态效果开发的最终方案" class="headerlink" title="动态传值以及页面动态效果开发的最终方案"></a>动态传值以及页面动态效果开发的最终方案</h3><h4 id="关于动态传值问题"><a href="#关于动态传值问题" class="headerlink" title="关于动态传值问题"></a>关于动态传值问题</h4><p>传值问题可以从表单元素的<code>value</code>属性说起，在这个属性中可以储存从后台拿到的值，但是普通的<code>div</code>等页面的元素可以使用自定义数据类型进行动态传值 <code>data-value data-id</code>等 ，要注意这些属性保存的都是字符串，取出时应该用<code>.getAttribute(&#39;data-value&#39;)</code>拿到</p>
<h4 id="页面动态效果开发"><a href="#页面动态效果开发" class="headerlink" title="页面动态效果开发"></a>页面动态效果开发</h4><p>如果只是用 js 控制<code>style</code>改变的均为内联样式，这种方式在微调方面效果显著，但是这种方式调节的是元素的内联样式，在需要大型的调整或者动大的变化时这种方式并不适用，应该通过调整元素的类名改变。、</p>
<h5 id="控制元素类名的方式"><a href="#控制元素类名的方式" class="headerlink" title="控制元素类名的方式"></a>控制元素类名的方式</h5><ol>
<li>通过 className，每个元素的 className 都是，它的类名，改变时可以直接赋值上新的类名，原来的类名将会被覆盖掉，所以常有这样的操作,来追加类名，但是不能将加号换成减号直接使用。<br><code>element.className+=&quot;NewClassName&quot;</code> 2.通过 classList,使用 className 调整类名时还是比较麻烦，所以直接用 classList。<br>(1)通过 ClassList 可以获取元素的全部类名;<br>(2)通过 ClassList.remove()可以删除元素的一个或多个类名；<br>(3)通过 ClassList.add()可以向元素添加一个或多个类名;<br>(4)通过 ClassList.lentgh 可以获取到元素类名的数目；<br>(5)通过 ClassList.item(x)可以获取到元素类名索引为 x 的类名;<br>(6)通过 ClassList.toggle()可以为元素切换类，只能有一个类名;<br>(7)通过 ClassList.contains(x)查看元素是否存在类名为”x”的类;<br>！！！添加删除多个类名时记得是用逗号隔开的参数，不能用空格隔开的类名列表。</li>
</ol>
<h3 id="textarea-文本域"><a href="#textarea-文本域" class="headerlink" title="textarea 文本域"></a>textarea 文本域</h3><pre><code>不加处理时用户可以自由拉伸可以加上`resize : none;`取消这个事件。与他自己的闭合标签中不能有任何东西，包括空格。
</code></pre>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><pre><code>设置事件细分有三种方式
1. 在script标签中
`&lt;div class=&quot;small&quot; onclick=&quot;(function()&#123;console.log(&#39;第一次点击&#39;)&#125;)()&quot;&gt;domNode&lt;/div&gt;`
2.快捷绑定
`&lt;script&gt;domNode.onclick=function()&#123;console.log(&#39;script&#39;)&#125;&lt;/script&gt;`
3.监听
``` js
</code></pre>
<p>domNode.addEventListener(‘click’,function(){<br>        console.log(‘第一次点击’)<br>    })<br>    domNode.addEventListener(‘click’,function(){<br>        console.log(‘第二次点击’)<br>    })&#96;&#96;&#96;<br>！！！先后顺序与排序相同，第三种可以绑定多个，前面的会造成覆盖。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>前端开发日常</tag>
      </tags>
  </entry>
  <entry>
    <title>js的数组方法</title>
    <url>/2024/08/31/JS%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JS 数组是极为灵活的数据结构，应用极为广泛，在这些封装好的方法帮助下，可以大大提高开发效率，和代码可读性。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-arr-push"><a href="#1-arr-push" class="headerlink" title="1. arr.push( )"></a>1. <code>arr.push( )</code></h3><p>   该方法接收一个或多个参数并将所有的参数按顺序插入数组的末尾。<br>   若将数组作为参数传入，不会将传入的数组拆开而是直接加入到原数组中。</p>
<h3 id="2-arr-forEach-callback"><a href="#2-arr-forEach-callback" class="headerlink" title="2. arr.forEach(callback )"></a>2. <code>arr.forEach(callback )</code></h3><p>   该方法接收一个回调函数作为参数 ，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法没有返回值，直接在回调函数内对数组处理即可</span></span><br><span class="line"><span class="comment">//其中回调函数的参数分别是遍历到的当前元素 当前元素的索引 被遍历的数组</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item, index, thisarr</span>) &#123;</span><br><span class="line">  <span class="comment">//处理元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-arr-map-callback"><a href="#3-arr-map-callback" class="headerlink" title="3. arr.map(callback)"></a>3. <code>arr.map(callback)</code></h3><p>   该方法同样接收一个回调函数作为参数，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法最后返回一个与原数组相同长度的新数组</span></span><br><span class="line"><span class="comment">//在回调函数内部可以对原数组处理，其中参数与forEach的回调参数相同</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, thisarr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-arr-fliter-callback"><a href="#4-arr-fliter-callback" class="headerlink" title="4. arr.fliter(callback)"></a>4. <code>arr.fliter(callback)</code></h3><p>   该方法也接收一个回调函数为参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法最后返回一个与原数组相同长度的新数组</span></span><br><span class="line"><span class="comment">//在回调函数内返回一个布尔类型的数据决定当前元素是否返回到新数组中</span></span><br><span class="line"><span class="comment">//，其中参数与forEach的回调参数相同</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">fliter</span>(<span class="keyword">function</span> (<span class="params">item, index, thisarr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-arr-findIndex-callback"><a href="#5-arr-findIndex-callback" class="headerlink" title="5. arr.findIndex(callback)"></a>5. <code>arr.findIndex(callback)</code></h3><p>   该方法接收一个回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该方法最后返回一个查找到元素的索引，找不到返回 -1</span></span><br><span class="line"><span class="comment">//在回调函数内返回一个布尔类型的数据决定当前元素是否找到了元素</span></span><br><span class="line"><span class="comment">//，其中参数与forEach的回调参数相同</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span> (<span class="params">item, index, thisarr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-arr-splice-a-b-c"><a href="#6-arr-splice-a-b-c" class="headerlink" title="6. arr.splice(a,b,c )"></a>6. <code>arr.splice(a,b,c )</code></h3><p>   该方法接收三个参数，第一个是修改的索引，第二个是将要删除的个数，第三个或更多的元素是在要修改位置插入的，这个方法会原地修改数组。</p>
<h3 id="7-arr-sort-callback"><a href="#7-arr-sort-callback" class="headerlink" title="7. arr.sort(callback)"></a>7. <code>arr.sort(callback)</code></h3><p>   该方法为所有数组元素进行了排序，按照升序或者降序排列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回调函数的两个参数是数组相邻的两项</span></span><br><span class="line"><span class="comment">//a-b&lt;0时升序排列</span></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="8-arr-reverse"><a href="#8-arr-reverse" class="headerlink" title="8. arr.reverse( )"></a>8. <code>arr.reverse( )</code></h3><p>   该方法可以直接将数组的元素反转顺序。</p>
<h3 id="9-arr-shift"><a href="#9-arr-shift" class="headerlink" title="9. arr.shift( )"></a>9. <code>arr.shift( )</code></h3><p>   删除第一个元素并返回该元素。</p>
<h3 id="10-arr-pop"><a href="#10-arr-pop" class="headerlink" title="10. arr.pop( )"></a>10. <code>arr.pop( )</code></h3><pre><code>删除末尾元素并返回删除的元素。
</code></pre>
<h3 id="11-arr-unshift"><a href="#11-arr-unshift" class="headerlink" title="11. arr.unshift( )"></a>11. <code>arr.unshift( )</code></h3><pre><code>在数组起始处添加元素并返回数组长度。
</code></pre>
<h3 id="12-arr-join"><a href="#12-arr-join" class="headerlink" title="12. arr.join( )"></a>12. <code>arr.join( )</code></h3><pre><code>可以将数组转化为字符串，并将该字符串返回，传入的字符参数会作为里连接符。
参数为字符。
</code></pre>
<h3 id="13-arr-concat"><a href="#13-arr-concat" class="headerlink" title="13. arr.concat( )"></a>13. <code>arr.concat( )</code></h3><pre><code>传入两个数组合成一个数组并反回新数组。
</code></pre>
<h3 id="14-arr-slice"><a href="#14-arr-slice" class="headerlink" title="14. arr.slice( )"></a>14. <code>arr.slice( )</code></h3><pre><code>arr.slice(起始索引，结束索引)
包含开始不包含结束。
可以只写一个参数，截取从该元素开始以后的所有元素。
还可以写负参数，代表截取到倒数第几个元素。
</code></pre>
<h3 id="15-arr-includes"><a href="#15-arr-includes" class="headerlink" title="15. arr.includes( )"></a>15. <code>arr.includes( )</code></h3><pre><code>判断传入的元素是否在数组中。
</code></pre>
]]></content>
      <categories>
        <category>js程序设计</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>原型和原型链问题探究</title>
    <url>/2024/08/31/%E5%8E%9F%E5%9E%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>原型知识是前端必不可少的进阶知识之一，掌握好原型知识可以让前端开发中更加游刃有余。</p>
<h4 id="JS对象"><a href="#JS对象" class="headerlink" title="JS对象"></a>JS对象</h4><p>对象是一种引用或者说是复合的数据结构。展现形式是键值形式，关于对象有很多内容，本节不做深度探究这个问题。主要探究关于原型有关的问题。</p>
<h4 id="对象的创建模式"><a href="#对象的创建模式" class="headerlink" title="对象的创建模式"></a>对象的创建模式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>字面量型</span><br><span class="line">  <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="number">2.</span><span class="title class_">Object</span>构造函数模式</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"> obj2.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"> obj2.<span class="property">age</span> = <span class="number">26</span></span><br><span class="line"><span class="number">3.</span>构造函数模式</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我能说话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;Jack&#x27;</span>, <span class="number">26</span>)</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&#x27;Rose&#x27;</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure>

<h4 id="原型问题主要是探究构造函数"><a href="#原型问题主要是探究构造函数" class="headerlink" title="原型问题主要是探究构造函数"></a>原型问题主要是探究构造函数</h4><p>在上面那段代码中，Test 就是构造函数，obj3,obj4 是这个构造函数的实例对象，每个对象都有一个特殊的属性就是原型(prototype),(函数也有原型,函数也是对象）</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><pre><code>1. 显式原型和隐式原型:
    a. 显式原型用prototype属性表示和查找,这是函数的特有属性,普通对象没有.
    b. 隐式原型用__proto__属性表示和查找,这是对象的属性,由于函数也是对象,
    所以每个对象都有这个属性.
    c. 隐式原型的值指向它构造函数的显式原型的值
2. Object的原型对象的隐式原型指向null
3. Function是在浏览器运行时已经创建好了的,是所有的起点.而且它的显式原型与隐式原型相等.
4. 原型链指的就是隐式原型指向连起来的一条链状结构,在查找时会按照这条链,
一直向上查找,直到null
</code></pre>
<h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src="https://jsd.onmicrosoft.cn/gh/Qchengju/MyPic@img/img/202408291057644.png" alt="原型链"></p>
<h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><h6 id="箭头函数出现的意义是什么"><a href="#箭头函数出现的意义是什么" class="headerlink" title="箭头函数出现的意义是什么?"></a>箭头函数出现的意义是什么?</h6><pre><code>(这个问题不在于探究箭头函数的使用问题.)
箭头函数是ES6中出现的一种简化写法,
` say=()=&gt;&#123;&#125;`,箭头函数的出现关键是解决了JS中函数的二义性
在其他面向对象的语言中在开始时就有类的概念,
在js中函数不仅可以是指令序列,也可能是一个构造函数用来创建对象
而箭头函数的出现限制了其只能是指令序列而不是构造函数.优化了代码执行
</code></pre>
]]></content>
      <categories>
        <category>js程序设计</category>
      </categories>
      <tags>
        <tag>js难点</tag>
      </tags>
  </entry>
  <entry>
    <title>日记7-28</title>
    <url>/2024/08/31/%E6%97%A5%E8%AE%B024-7-28/</url>
    <content><![CDATA[<h2 id="展示透明背景"><a href="#展示透明背景" class="headerlink" title="展示透明背景"></a>展示透明背景</h2><h3 id="1-设置-opacity透明度属性"><a href="#1-设置-opacity透明度属性" class="headerlink" title="1.设置 opacity透明度属性"></a>1.设置 <code>opacity</code>透明度属性</h3><p>会导致整体变透明</p>
<h3 id="2-设置rgba-背景颜色"><a href="#2-设置rgba-背景颜色" class="headerlink" title="2.设置rgba 背景颜色"></a>2.设置<code>rgba 背景颜色</code></h3><p>最后一个参数a 代表透明度。</p>
]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>前端开发日常</tag>
      </tags>
  </entry>
  <entry>
    <title>编程规范</title>
    <url>/2024/08/31/%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="编写代码规范"><a href="#编写代码规范" class="headerlink" title="编写代码规范"></a>编写代码规范</h2><ol>
<li>每次写完一部分在代码后留出一个空行.便于修改和续写.</li>
<li>模块化编程,尽量让每个模块的功能单一,不要功能交叉.</li>
</ol>
<h2 id="代码命名规范"><a href="#代码命名规范" class="headerlink" title="代码命名规范"></a>代码命名规范</h2><ol>
<li><code>辨识度,详细度,区分度</code>  准确且详细</li>
<li>类名使用大驼峰命名,变量等使用小驼峰命名或者下划线命名</li>
</ol>
<h2 id="文件夹命名"><a href="#文件夹命名" class="headerlink" title="文件夹命名"></a>文件夹命名</h2>]]></content>
      <categories>
        <category>public</category>
      </categories>
      <tags>
        <tag>代码规范</tag>
      </tags>
  </entry>
</search>
